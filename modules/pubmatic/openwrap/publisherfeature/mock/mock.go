// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PubMatic-OpenWrap/prebid-server/modules/pubmatic/openwrap/publisherfeature (interfaces: Feature)

// Package mock_publisherfeature is a generated GoMock package.
package mock_publisherfeature

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFeature is a mock of Feature interface
type MockFeature struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureMockRecorder
}

// MockFeatureMockRecorder is the mock recorder for MockFeature
type MockFeatureMockRecorder struct {
	mock *MockFeature
}

// NewMockFeature creates a new mock instance
func NewMockFeature(ctrl *gomock.Controller) *MockFeature {
	mock := &MockFeature{ctrl: ctrl}
	mock.recorder = &MockFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeature) EXPECT() *MockFeatureMockRecorder {
	return m.recorder
}

// IsAmpMultiformatEnabled mocks base method
func (m *MockFeature) IsAmpMultiformatEnabled(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAmpMultiformatEnabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAmpMultiformatEnabled indicates an expected call of IsAmpMultiformatEnabled
func (mr *MockFeatureMockRecorder) IsAmpMultiformatEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAmpMultiformatEnabled", reflect.TypeOf((*MockFeature)(nil).IsAmpMultiformatEnabled), arg0)
}

// IsFscApplicable mocks base method
func (m *MockFeature) IsFscApplicable(arg0 int, arg1 string, arg2 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFscApplicable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFscApplicable indicates an expected call of IsFscApplicable
func (mr *MockFeatureMockRecorder) IsFscApplicable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFscApplicable", reflect.TypeOf((*MockFeature)(nil).IsFscApplicable), arg0, arg1, arg2)
}

// IsTBFFeatureEnabled mocks base method
func (m *MockFeature) IsTBFFeatureEnabled(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTBFFeatureEnabled", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTBFFeatureEnabled indicates an expected call of IsTBFFeatureEnabled
func (mr *MockFeatureMockRecorder) IsTBFFeatureEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTBFFeatureEnabled", reflect.TypeOf((*MockFeature)(nil).IsTBFFeatureEnabled), arg0, arg1)
}
