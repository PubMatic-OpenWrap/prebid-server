// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PubMatic-OpenWrap/prebid-server/v3/modules/pubmatic/openwrap/wakanda (interfaces: Commands,DebugInterface)

// Package mock_wakanda is a generated GoMock package.
package mock_wakanda

import (
	json "encoding/json"
	gomock "github.com/golang/mock/gomock"
	openrtb2 "github.com/prebid/openrtb/v20/openrtb2"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockCommands is a mock of Commands interface
type MockCommands struct {
	ctrl     *gomock.Controller
	recorder *MockCommandsMockRecorder
}

// MockCommandsMockRecorder is the mock recorder for MockCommands
type MockCommandsMockRecorder struct {
	mock *MockCommands
}

// NewMockCommands creates a new mock instance
func NewMockCommands(ctrl *gomock.Controller) *MockCommands {
	mock := &MockCommands{ctrl: ctrl}
	mock.recorder = &MockCommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommands) EXPECT() *MockCommandsMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockCommands) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCommandsMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCommands)(nil).Start))
}

// StdinPipe mocks base method
func (m *MockCommands) StdinPipe() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdinPipe")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StdinPipe indicates an expected call of StdinPipe
func (mr *MockCommandsMockRecorder) StdinPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdinPipe", reflect.TypeOf((*MockCommands)(nil).StdinPipe))
}

// Wait mocks base method
func (m *MockCommands) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockCommandsMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCommands)(nil).Wait))
}

// MockDebugInterface is a mock of DebugInterface interface
type MockDebugInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDebugInterfaceMockRecorder
}

// MockDebugInterfaceMockRecorder is the mock recorder for MockDebugInterface
type MockDebugInterfaceMockRecorder struct {
	mock *MockDebugInterface
}

// NewMockDebugInterface creates a new mock instance
func NewMockDebugInterface(ctrl *gomock.Controller) *MockDebugInterface {
	mock := &MockDebugInterface{ctrl: ctrl}
	mock.recorder = &MockDebugInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebugInterface) EXPECT() *MockDebugInterfaceMockRecorder {
	return m.recorder
}

// EnableIfRequired mocks base method
func (m *MockDebugInterface) EnableIfRequired(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableIfRequired", arg0, arg1)
}

// EnableIfRequired indicates an expected call of EnableIfRequired
func (mr *MockDebugInterfaceMockRecorder) EnableIfRequired(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableIfRequired", reflect.TypeOf((*MockDebugInterface)(nil).EnableIfRequired), arg0, arg1)
}

// IsEnable mocks base method
func (m *MockDebugInterface) IsEnable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnable indicates an expected call of IsEnable
func (mr *MockDebugInterfaceMockRecorder) IsEnable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnable", reflect.TypeOf((*MockDebugInterface)(nil).IsEnable))
}

// SetHTTPRequestData mocks base method
func (m *MockDebugInterface) SetHTTPRequestData(arg0 *http.Request, arg1 json.RawMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTTPRequestData", arg0, arg1)
}

// SetHTTPRequestData indicates an expected call of SetHTTPRequestData
func (mr *MockDebugInterfaceMockRecorder) SetHTTPRequestData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTTPRequestData", reflect.TypeOf((*MockDebugInterface)(nil).SetHTTPRequestData), arg0, arg1)
}

// SetHTTPResponseBodyWriter mocks base method
func (m *MockDebugInterface) SetHTTPResponseBodyWriter(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTTPResponseBodyWriter", arg0)
}

// SetHTTPResponseBodyWriter indicates an expected call of SetHTTPResponseBodyWriter
func (mr *MockDebugInterfaceMockRecorder) SetHTTPResponseBodyWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTTPResponseBodyWriter", reflect.TypeOf((*MockDebugInterface)(nil).SetHTTPResponseBodyWriter), arg0)
}

// SetHTTPResponseWriter mocks base method
func (m *MockDebugInterface) SetHTTPResponseWriter(arg0 http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTTPResponseWriter", arg0)
}

// SetHTTPResponseWriter indicates an expected call of SetHTTPResponseWriter
func (mr *MockDebugInterfaceMockRecorder) SetHTTPResponseWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTTPResponseWriter", reflect.TypeOf((*MockDebugInterface)(nil).SetHTTPResponseWriter), arg0)
}

// SetLogger mocks base method
func (m *MockDebugInterface) SetLogger(arg0 json.RawMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockDebugInterfaceMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockDebugInterface)(nil).SetLogger), arg0)
}

// SetOpenRTB mocks base method
func (m *MockDebugInterface) SetOpenRTB(arg0 *openrtb2.BidRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenRTB", arg0)
}

// SetOpenRTB indicates an expected call of SetOpenRTB
func (mr *MockDebugInterfaceMockRecorder) SetOpenRTB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenRTB", reflect.TypeOf((*MockDebugInterface)(nil).SetOpenRTB), arg0)
}

// SetWinningBid mocks base method
func (m *MockDebugInterface) SetWinningBid(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWinningBid", arg0)
}

// SetWinningBid indicates an expected call of SetWinningBid
func (mr *MockDebugInterfaceMockRecorder) SetWinningBid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWinningBid", reflect.TypeOf((*MockDebugInterface)(nil).SetWinningBid), arg0)
}

// WriteLogToFiles mocks base method
func (m *MockDebugInterface) WriteLogToFiles() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteLogToFiles")
}

// WriteLogToFiles indicates an expected call of WriteLogToFiles
func (mr *MockDebugInterfaceMockRecorder) WriteLogToFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLogToFiles", reflect.TypeOf((*MockDebugInterface)(nil).WriteLogToFiles))
}
