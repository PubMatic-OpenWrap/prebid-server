// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PubMatic-OpenWrap/prebid-server/v2/modules/pubmatic/openwrap/cache (interfaces: Cache)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openrtb2 "github.com/prebid/openrtb/v20/openrtb2"
	models "github.com/prebid/prebid-server/v2/modules/pubmatic/openwrap/models"
	adunitconfig "github.com/prebid/prebid-server/v2/modules/pubmatic/openwrap/models/adunitconfig"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// GetAdunitConfigFromCache mocks base method.
func (m *MockCache) GetAdunitConfigFromCache(request *openrtb2.BidRequest, pubID, profileID, displayVersion int) *adunitconfig.AdUnitConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdunitConfigFromCache", request, pubID, profileID, displayVersion)
	ret0, _ := ret[0].(*adunitconfig.AdUnitConfig)
	return ret0
}

// GetAdunitConfigFromCache indicates an expected call of GetAdunitConfigFromCache.
func (mr *MockCacheMockRecorder) GetAdunitConfigFromCache(request, pubID, profileID, displayVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdunitConfigFromCache", reflect.TypeOf((*MockCache)(nil).GetAdunitConfigFromCache), request, pubID, profileID, displayVersion)
}

// GetFSCThresholdPerDSP mocks base method.
func (m *MockCache) GetFSCThresholdPerDSP() (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSCThresholdPerDSP")
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSCThresholdPerDSP indicates an expected call of GetFSCThresholdPerDSP.
func (mr *MockCacheMockRecorder) GetFSCThresholdPerDSP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFSCThresholdPerDSP", reflect.TypeOf((*MockCache)(nil).GetFSCThresholdPerDSP))
}

// GetMappingsFromCacheV25 mocks base method.
func (m *MockCache) GetMappingsFromCacheV25(rctx models.RequestCtx, partnerID int) map[string]models.SlotMapping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMappingsFromCacheV25", rctx, partnerID)
	ret0, _ := ret[0].(map[string]models.SlotMapping)
	return ret0
}

// GetMappingsFromCacheV25 indicates an expected call of GetMappingsFromCacheV25.
func (mr *MockCacheMockRecorder) GetMappingsFromCacheV25(rctx, partnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMappingsFromCacheV25", reflect.TypeOf((*MockCache)(nil).GetMappingsFromCacheV25), rctx, partnerID)
}

// GetPartnerConfigMap mocks base method.
func (m *MockCache) GetPartnerConfigMap(arg0, arg1, arg2 int) (map[int]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerConfigMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[int]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerConfigMap indicates an expected call of GetPartnerConfigMap.
func (mr *MockCacheMockRecorder) GetPartnerConfigMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerConfigMap", reflect.TypeOf((*MockCache)(nil).GetPartnerConfigMap), arg0, arg1, arg2)
}

// GetPublisherFeatureMap mocks base method.
func (m *MockCache) GetPublisherFeatureMap() (map[int]map[int]models.FeatureData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherFeatureMap")
	ret0, _ := ret[0].(map[int]map[int]models.FeatureData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisherFeatureMap indicates an expected call of GetPublisherFeatureMap.
func (mr *MockCacheMockRecorder) GetPublisherFeatureMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherFeatureMap", reflect.TypeOf((*MockCache)(nil).GetPublisherFeatureMap))
}

// GetPublisherVASTTagsFromCache mocks base method.
func (m *MockCache) GetPublisherVASTTagsFromCache(pubID int) models.PublisherVASTTags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherVASTTagsFromCache", pubID)
	ret0, _ := ret[0].(models.PublisherVASTTags)
	return ret0
}

// GetPublisherVASTTagsFromCache indicates an expected call of GetPublisherVASTTagsFromCache.
func (mr *MockCacheMockRecorder) GetPublisherVASTTagsFromCache(pubID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherVASTTagsFromCache", reflect.TypeOf((*MockCache)(nil).GetPublisherVASTTagsFromCache), pubID)
}

// GetSlotToHashValueMapFromCacheV25 mocks base method.
func (m *MockCache) GetSlotToHashValueMapFromCacheV25(rctx models.RequestCtx, partnerID int) models.SlotMappingInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotToHashValueMapFromCacheV25", rctx, partnerID)
	ret0, _ := ret[0].(models.SlotMappingInfo)
	return ret0
}

// GetSlotToHashValueMapFromCacheV25 indicates an expected call of GetSlotToHashValueMapFromCacheV25.
func (mr *MockCacheMockRecorder) GetSlotToHashValueMapFromCacheV25(rctx, partnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotToHashValueMapFromCacheV25", reflect.TypeOf((*MockCache)(nil).GetSlotToHashValueMapFromCacheV25), rctx, partnerID)
}

// Set mocks base method.
func (m *MockCache) Set(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value)
}
