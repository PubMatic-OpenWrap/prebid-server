package openrtb_ext

import (
	"encoding/json"
	"fmt"
	"testing"

	"github.com/prebid/openrtb/v17/openrtb2"
	"github.com/stretchr/testify/assert"
)

func TestRebuildResponseExt(t *testing.T) {
	prebidSample1 := ExtResponsePrebid{AuctionTimestamp: 118}
	prebidSample1Json, _ := json.Marshal(struct {
		Prebid ExtResponsePrebid `json:"prebid"`
	}{Prebid: prebidSample1})

	prebidSample2 := ExtResponsePrebid{AuctionTimestamp: 218}
	prebidSample2Json, _ := json.Marshal(struct {
		Prebid ExtResponsePrebid `json:"prebid"`
	}{Prebid: prebidSample2})

	testCases := []struct {
		name             string
		response         openrtb2.BidResponse
		respExt          ResponseExt
		expectedResponse openrtb2.BidResponse
		expectedErr      error
	}{
		{
			name:             "Empty - Not Dirty",
			response:         openrtb2.BidResponse{},
			respExt:          ResponseExt{},
			expectedResponse: openrtb2.BidResponse{},
		},
		{
			name:             "Empty - Dirty",
			response:         openrtb2.BidResponse{},
			respExt:          ResponseExt{prebid: &prebidSample1, prebidDirty: true},
			expectedResponse: openrtb2.BidResponse{Ext: prebidSample1Json},
		},
		{
			name:             "Empty - Dirty - No Change",
			response:         openrtb2.BidResponse{},
			respExt:          ResponseExt{prebid: nil, prebidDirty: true},
			expectedResponse: openrtb2.BidResponse{},
		},
		{
			name:             "Populated - Not Dirty",
			response:         openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:          ResponseExt{},
			expectedResponse: openrtb2.BidResponse{Ext: prebidSample1Json},
		},
		{
			name:             "Populated - Dirty",
			response:         openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:          ResponseExt{prebid: &prebidSample2, prebidDirty: true},
			expectedResponse: openrtb2.BidResponse{Ext: prebidSample2Json},
		},
		{
			name:             "Populated - Dirty - No Change",
			response:         openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:          ResponseExt{prebid: &prebidSample1, prebidDirty: true},
			expectedResponse: openrtb2.BidResponse{Ext: prebidSample1Json},
		},
		{
			name:             "Populated - Dirty - Cleared",
			response:         openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:          ResponseExt{prebid: nil, prebidDirty: true},
			expectedResponse: openrtb2.BidResponse{},
		},
		{
			name:             "Appended - Dirty",
			response:         openrtb2.BidResponse{Ext: []byte(`{"key1": "value1"}`)},
			respExt:          ResponseExt{prebid: &prebidSample1, prebidDirty: true},
			expectedResponse: openrtb2.BidResponse{Ext: []byte(`{"key1":"value1","prebid":{"auctiontimestamp":118}}`)},
		},
	}
	for _, test := range testCases {
		t.Run(test.name, func(t *testing.T) {
			// create required filed in the test loop to keep test declaration easier to read
			test.respExt.extMap = make(map[string]json.RawMessage)
			// keep responseExt.extMap in sync with response.Ext
			if len(test.response.Ext) > 2 {
				json.Unmarshal(test.response.Ext, &test.respExt.extMap)
			}
			rw := ResponseWrapper{BidResponse: &test.response, responseExt: &test.respExt}
			err := rw.rebuildResponseExt()
			assert.Equal(t, test.expectedResponse, *rw.BidResponse, test.name)
			assert.Equal(t, test.expectedErr, err, test.name)
		})
	}
}

func TestGetResponseExt(t *testing.T) {
	prebidSample1 := ExtResponsePrebid{AuctionTimestamp: 118}
	prebidSample1Json, _ := json.Marshal(struct {
		Prebid ExtResponsePrebid `json:"prebid"`
	}{Prebid: prebidSample1})
	prebidSample2 := ExtResponsePrebid{AuctionTimestamp: 218}

	testCases := []struct {
		name            string
		response        openrtb2.BidResponse
		respExt         ResponseExt
		expectedRespExt ResponseExt
		expectedErr     error
	}{
		{
			name:            "Empty - Not Dirty",
			response:        openrtb2.BidResponse{},
			respExt:         ResponseExt{},
			expectedRespExt: ResponseExt{},
		},
		{
			name:            "Empty - Dirty",
			response:        openrtb2.BidResponse{},
			respExt:         ResponseExt{prebid: &prebidSample1, prebidDirty: true},
			expectedRespExt: ResponseExt{prebid: &prebidSample1, prebidDirty: true},
		},
		{
			name:            "Empty - Dirty - No Change",
			response:        openrtb2.BidResponse{},
			respExt:         ResponseExt{prebid: nil, prebidDirty: true},
			expectedRespExt: ResponseExt{prebid: nil, prebidDirty: true},
		},
		{
			name:            "Populated - Not Dirty",
			response:        openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:         ResponseExt{},
			expectedRespExt: ResponseExt{},
		},
		{
			name:            "Populated - Dirty",
			response:        openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:         ResponseExt{prebid: &prebidSample2, prebidDirty: true},
			expectedRespExt: ResponseExt{prebid: &prebidSample2, prebidDirty: true},
		},
		{
			name:            "Populated - Dirty - No Change",
			response:        openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:         ResponseExt{prebid: &prebidSample1, prebidDirty: true},
			expectedRespExt: ResponseExt{prebid: &prebidSample1, prebidDirty: true},
		},
		{
			name:            "Populated - Dirty - Cleared",
			response:        openrtb2.BidResponse{Ext: prebidSample1Json},
			respExt:         ResponseExt{prebid: nil, prebidDirty: true},
			expectedRespExt: ResponseExt{prebid: nil, prebidDirty: true},
		},
		{
			name:            "Appended - Dirty",
			response:        openrtb2.BidResponse{Ext: []byte(`{"key1": "value1"}`)},
			respExt:         ResponseExt{prebid: &prebidSample1, prebidDirty: true},
			expectedRespExt: ResponseExt{prebid: &prebidSample1, prebidDirty: true},
		},
	}
	for _, test := range testCases {
		t.Run(test.name, func(t *testing.T) {
			rw := ResponseWrapper{BidResponse: &test.response, responseExt: &test.respExt}
			actualRespExt, actualErr := rw.GetResponseExt()
			assert.Equal(t, test.expectedRespExt, *actualRespExt, test.name)
			assert.Equal(t, test.expectedErr, actualErr, test.name)
		})
	}
}

func TestRebuildResponse(t *testing.T) {
	testCases := []struct {
		name     string
		response *openrtb2.BidResponse
	}{
		{},
	}
	for _, test := range testCases {
		t.Run(test.name, func(t *testing.T) {
			rw := mockResponseWrapper{}
			rw.RebuildResponse()
		})
	}

}

type mockResponseWrapper struct {
	ResponseWrapper
}

func (m *mockResponseWrapper) rebuildResponseExt() error {
	return nil
}

func (m *mockResponseWrapper) RebuildResponse() error {
	fmt.Printf("inside mock")
	return nil
}
func (m *mockResponseWrapper) GetResponseExt() (*ResponseExt, error) {
	return nil, nil
}
